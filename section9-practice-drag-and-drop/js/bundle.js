(()=>{"use strict";var t;!function(t){t[t.Active=0]="Active",t[t.Finished=1]="Finished"}(t||(t={}));const e=new class{constructor(){this.projects=[],this.listeners=[]}addProject(e,s,i){let n={title:e,description:s,people:i,id:Math.random(),status:t.Active};for(let t of this.listeners)t(this.projects.slice());this.projects.push(n),this.updateListeners()}addListener(t){this.listeners.push(t)}moveProject(t,e){let s=this.projects.find((e=>""+e.id===t));s&&s.status!==e&&(s.status=e,this.updateListeners())}updateListeners(){for(let t of this.listeners)t(this.projects.slice())}};class s{constructor(t,e){this.project=t,this.list=e,this.listItem=document.createElement("li"),this.listItem.draggable=!0;let s=document.createElement("h2"),i=document.createElement("h3"),n=document.createElement("p");s.innerHTML=this.project.title,i.innerHTML=this.project.description,n.innerHTML=this.persons(this.project.people)+" assigned",this.listItem.appendChild(s),this.listItem.appendChild(i),this.listItem.appendChild(n),this.listItem.id=""+t.id,null==e||e.appendChild(this.listItem),this.configure()}persons(t){return 1===t?"1 person":`${t} persons`}dragStartHandler(t){t.dataTransfer.setData("text/plain",""+this.project.id),t.dataTransfer.effectAllowed="move"}dragEndHandler(t){}configure(){this.listItem.addEventListener("dragstart",this.dragStartHandler),this.listItem.addEventListener("dragend",this.dragEndHandler)}}class i{constructor(s){this.type=s,this.assignedProjects=[],this.templateElement=document.getElementById("project-list"),this.wherePutElement=document.getElementById("app");let i=document.importNode(this.templateElement.content,!0);this.element=i.firstElementChild,this.element.id=`${this.type}-projects`,e.addListener((e=>{this.assignedProjects=e;let s=e.filter((e=>"active"===this.type?e.status===t.Active:e.status===t.Finished));this.assignedProjects=s,this.renderProjects()})),this.renderContent(),this.attach(),this.list=document.getElementById(`${this.type}-projects-list`)}renderProjects(){this.list.innerHTML="";for(let t of this.assignedProjects)new s(t,this.list)}attach(){this.wherePutElement.insertAdjacentElement("beforeend",this.element)}dragOverHandler(t){var e;t.dataTransfer&&"text/plain"===t.dataTransfer.types[0]&&(t.preventDefault(),null===(e=this.list)||void 0===e||e.classList.add("droppable"))}dropHandler(s){var i;let n=null===(i=s.dataTransfer)||void 0===i?void 0:i.getData("text/plain");e.moveProject(n,"active"===this.type?t.Active:t.Finished)}dragLeaveHandler(t){this.list.classList.remove("droppable")}renderContent(){let t=`${this.type}-projects-list`;this.element.querySelector("ul").id=t,this.element.querySelector("h2").innerText=`${this.type.toLocaleUpperCase()} PROJECTS`}}new class{constructor(){this.templateElement=document.getElementById("project-input"),this.wherePutElement=document.getElementById("app");let t=document.importNode(this.templateElement.content,!0);this.element=t.firstElementChild,this.element.id="user-input",this.titleInputELement=this.element.querySelector("#title"),this.descriptionInputELement=this.element.querySelector("#description"),this.numberInputELement=this.element.querySelector("#people"),this.attach(),this.configure()}gatherUserInput(){let t=this.titleInputELement.value,e=this.descriptionInputELement.value,s=this.numberInputELement.value;if(t.trim().length>0&&e.trim().length>0&&s.trim().length>0)return[t,e,+s]}handleSubmit(t){t.preventDefault(),this.gatherUserInput()?(e.addProject(this.titleInputELement.value,this.descriptionInputELement.value,+this.numberInputELement.value),this.titleInputELement.value="",this.descriptionInputELement.value="",this.numberInputELement.value=""):alert("Data is not correct!")}configure(){this.element.addEventListener("submit",this.handleSubmit)}attach(){this.wherePutElement.insertAdjacentElement("afterbegin",this.element)}},new i("active"),new i("finished")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,